import org.mycontainer.kernel.*;
import org.mycontainer.kernel.boot.*;
import org.mycontainer.kernel.deploy.*;
import org.mycontainer.ejb.*;
import org.mycontainer.jpa.*;
import org.mycontainer.datasource.*;
import org.mycontainer.web.*;
import org.mycontainer.web.jetty.*;

import javax.naming.InitialContext;

import java.io.*;
import java.nio.channels.FileChannel;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import org.apache.log4j.PatternLayout;

import br.com.dextra.common.database.*;
import br.com.dextra.common.infra.*;
import br.com.dextra.common.persistence.*;

try {	
	// logger configuration 
	Logger root = Logger.getRootLogger();
	root.setLevel(Level.ERROR);
	ConsoleAppender appender = new ConsoleAppender(new PatternLayout("%-5p [%t]: %m%n"));
	root.addAppender(appender);

	// some configurations 
	System.setProperty("java.naming.factory.initial", "org.mycontainer.kernel.naming.MyContainerContextFactory");	
	System.setProperty("org.mortbay.jetty.Request.maxFormContentSize", "500000");

	builder = new ContainerBuilder();
	builder.deployVMShutdownHook();
	SessionInterceptorDeployer sessionInterceptorDeployer = builder.createDeployer(SessionInterceptorDeployer.class);
	sessionInterceptorDeployer.deploy();

	// JTA configuration
	MyTransactionManagerDeployer jta = builder.createDeployer(MyTransactionManagerDeployer.class);
	jta.setName("TransactionManager");
	jta.setUserTransactionName("UserTransaction");
	jta.deploy();

	// Datasource configuration
	String datasourceName = new String("java:/SugarDS"); 
	DataSourceDeployer ds = builder.createDeployer(DataSourceDeployer.class);
	ds.setName(datasourceName);
	// **********************************************************************
	// MySQL Connection
	// **********************************************************************
	//ds.setDriver("com.mysql.jdbc.Driver");
	//ds.setUrl("jdbc:mysql://localhost:3306/sugar_db");
	//ds.setUser("root");
	//ds.setPass("root");
	// **********************************************************************

	// **********************************************************************
	// HSQLDB Connection
	// **********************************************************************
	ds.setDriver("org.hsqldb.jdbcDriver");
	String userHome = System.getProperty("user.home");
	ds.setUrl("jdbc:hsqldb:file:" + userHome + "/muuk/data");
	// **********************************************************************

	ds.deploy();

	// JPA configuration
	JPADeployer jpa = builder.createDeployer(JPADeployer.class);
	JPAInfoBuilder info = (JPAInfoBuilder) jpa.getInfo();
	info.setPersistenceUnitName("sugar-pu");
	info.setJtaDataSourceName(datasourceName);
	info.addJarFileUrl(BaseEntity.class);
	info.setPersistenceUnitRootUrl(BaseEntityRepository.class);

	// Hibernate configuration
	Properties props = info.getProperties();
	props.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
	props.setProperty("hibernate.hbm2ddl.auto", "update");
	props.setProperty("hibernate.show_sql", "false");
	props.setProperty("hibernate.transaction.auto_close_session", "true");

	jpa.deploy();

	// Scan a package with an EJB 
	ScannerDeployer scanner = builder.createDeployer(ScannerDeployer.class);
	scanner.add(new StatelessScannableDeployer());
	scanner.add(new MessageDrivenScannableDeployer());
	scanner.scan(BaseEntityRepositoryBean.class);
	scanner.deploy();

	// Configuring webServer and webAPP
	JettyServerDeployer webServer = builder.createDeployer(JettyServerDeployer.class);
        webServer.getServer().setSessionIdManager(new org.mortbay.jetty.servlet.HashSessionIdManager(new Random()));
	webServer.bindPort(8080);
	webServer.setName("WebServer");

	ContextWebServer mainContext = webServer.createContextWebServer();
	mainContext.setContext("/muuk");
	mainContext.setResources("view/main-web/src/main/webapp/");

	webServer.deploy();

	DatabaseManager.runManager(datasourceName);
	builder.waitFor();

} catch (Exception e) {
	e.printStackTrace();
    	throw e;
}
